// Package config provides configuration handling for lazydash
package config

import (
	"github.com/alecthomas/kingpin/v2"
)

// VisualizationType defines available panel visualizations
type VisualizationType string

const (
	// VisualizationGraph represents a time-series graph panel
	VisualizationGraph VisualizationType = "graph"
	// VisualizationGauge represents a gauge panel
	VisualizationGauge VisualizationType = "gauge"
	// VisualizationStat represents a stat panel
	VisualizationStat VisualizationType = "stat"
	// VisualizationTable represents a table panel
	VisualizationTable VisualizationType = "table"
	// VisualizationHeatmap represents a heatmap panel
	VisualizationHeatmap VisualizationType = "heatmap"
	// VisualizationBarGauge represents a bar gauge panel
	VisualizationBarGauge VisualizationType = "bargauge"
)

// AlertThreshold defines alert levels for panels
type AlertThreshold struct {
	Metric  string  // Which metric to alert on
	Warning float64 // Warning threshold
	Error   float64 // Error threshold
	Notify  bool    // Whether to send notifications
}

// FolderConfig defines dashboard organization
type FolderConfig struct {
	Name        string // Folder name
	Description string // Folder description
	Create      bool   // Create folder if it doesn't exist
}

// LabelGroupConfig defines how to group panels by labels
type LabelGroupConfig struct {
	// Labels to group by
	GroupByLabels []string
	// Whether to create separate rows for each group
	SeparateRows bool
	// How many panels per row (0 for auto)
	PanelsPerRow int
}

// AdvancedVisualizationConfig provides configuration for advanced visualizations
type AdvancedVisualizationConfig struct {
	// Default visualization type
	DefaultType VisualizationType
	// Override visualizations by metric type
	CounterType VisualizationType
	GaugeType   VisualizationType
	SummaryType VisualizationType
	// Special visualization settings
	UseHeatmapForHistograms bool
	UseStatForGauges        bool
	UseTableForMultiLabels  bool
}

// VendorPrefixConfig defines settings for vendor-specific metrics
type VendorPrefixConfig struct {
	// Enabled vendor-specific detection
	Enabled bool
	// Known prefixes to identify
	KnownPrefixes []string
	// Custom prefixes provided by user
	CustomPrefixes []string
	// Group by vendor in dashboard
	GroupByVendor bool
	// Special handling for Juniper metrics
	JuniperEnabled bool
	// Special handling for Cisco metrics
	CiscoEnabled bool
}

// Config contains all configuration options
type Config struct {
	// Basic options
	Title              string
	Description        string
	Gauges             bool
	File               string
	Pretty             bool
	Stdin              bool
	CounterExprTmpl    string
	GaugeExprTmpl      string
	SummaryExprTmpl    string
	Delimiter          string
	CounterLegend      string
	GaugeLegend        string
	SummaryLegend      string
	Table              bool
	URL                string
	Token              string
	GrafanaHost        string
	InsecureSkipVerify bool
	
	// Advanced options
	FolderConfig         *FolderConfig
	LabelGrouping        *LabelGroupConfig
	Visualizations       *AdvancedVisualizationConfig
	Alerts               []*AlertThreshold
	GenerateAlerts       bool
	AutoCorrelate        bool
	AutoCorrelateThreshold float64 // Correlation threshold (0.0-1.0)
	
	// Vendor-specific options
	VendorConfig         *VendorPrefixConfig
}

// New returns a new configuration with defaults
func New() *Config {
	return &Config{
		Title:            "Prometheus Dashboard",
		Description:      "Generated by Lazydash",
		Stdin:            true,
		Delimiter:        ":METRIC:",
		CounterExprTmpl:  "sum(rate(:METRIC: [1m]))",
		GaugeExprTmpl:    ":METRIC:",
		SummaryExprTmpl:  ":METRIC:",
		CounterLegend:    "Job:[{{job}}]",
		GaugeLegend:      "Job:[{{job}}]",
		SummaryLegend:    "Job:[{{job}}]",
		
		AutoCorrelateThreshold: 0.7,
		
		// Initialize vendor config with defaults
		VendorConfig: &VendorPrefixConfig{
			Enabled: false,
			KnownPrefixes: []string{
				"juniper_", "cisco_", "arista_", "huawei_", "nokia_", "paloalto_",
				"fortinet_", "f5_", "checkpoint_", "ubiquiti_", "mikrotik_",
			},
			CustomPrefixes: []string{},
			GroupByVendor: true,
			JuniperEnabled: false,
			CiscoEnabled: false,
		},
	}
}

// RegisterFlags registers command line flags for all config options
func (c *Config) RegisterFlags(app *kingpin.Application) {
	// Basic options
	app.Flag("file", "Parse metrics from file.").Default("").Short('f').StringVar(&c.File)
	app.Flag("title", "Dashboard title").Short('t').Default("Prometheus Dashboard").StringVar(&c.Title)
	app.Flag("description", "Dashboard description").Default("Generated by Lazydash").StringVar(&c.Description)
	app.Flag("stdin", "Read from stdin").Default("true").BoolVar(&c.Stdin)
	app.Flag("url", "Fetch Prometheus data from HTTP(S) url").Default("").StringVar(&c.URL)
	app.Flag("pretty", "Print pretty indented JSON").Short('p').Default("false").BoolVar(&c.Pretty)
	app.Flag("gauges", "Render gauge values as gauge panel type instead of graph").Short('g').Default("false").BoolVar(&c.Gauges)
	app.Flag("table", "Render legend as a table").Default("false").BoolVar(&c.Table)
	app.Flag("set-counter-expr", "Set custom meterics query expression for counter type metric").Default("sum(rate(:METRIC: [1m]))").StringVar(&c.CounterExprTmpl)
	app.Flag("set-gauge-expr", "Set custom meterics query expression for gauge type metric").Default(":METRIC:").StringVar(&c.GaugeExprTmpl)
	app.Flag("set-summary-expr", "Set custom meterics query expression for summary type metric").Default(":METRIC:").StringVar(&c.SummaryExprTmpl)
	app.Flag("set-delimiter", "Set custom meterics delimiter used to insert metric name into expression, only used if a custom expression is set").Default(":METRIC:").StringVar(&c.Delimiter)
	app.Flag("set-counter-legend", "Set the default counter panel legend format").Default("Job:[{{job}}]").StringVar(&c.CounterLegend)
	app.Flag("set-gauge-legend", "Set the default counter panel legend format").Default("Job:[{{job}}]").StringVar(&c.GaugeLegend)
	app.Flag("grafana-url", "Set the grafana api url e.g http://grafana.example.com:3000").Short('H').Default("").StringVar(&c.GrafanaHost)
	app.Flag("insecure", "Skip ssl certificate verification").Short('I').Default("false").BoolVar(&c.InsecureSkipVerify)
	app.Flag("token", "Set the grafana api token").Short('T').Default("").StringVar(&c.Token)
	
	// Folder organization options
	folderConfig := &FolderConfig{}
	app.Flag("folder", "Set the Grafana folder name").Default("").StringVar(&folderConfig.Name)
	app.Flag("folder-create", "Create the folder if it doesn't exist").Default("true").BoolVar(&folderConfig.Create)
	app.Flag("folder-description", "Set the Grafana folder description").Default("Generated by Lazydash").StringVar(&folderConfig.Description)
	
	// Label grouping options
	labelGrouping := &LabelGroupConfig{}
	app.Flag("group-by", "Group panels by label").Default("").StringsVar(&labelGrouping.GroupByLabels)
	app.Flag("separate-rows", "Create separate rows for each label group").Default("true").BoolVar(&labelGrouping.SeparateRows)
	app.Flag("panels-per-row", "Number of panels per row (0 for auto)").Default("2").IntVar(&labelGrouping.PanelsPerRow)
	
	// Auto-correlation options
	app.Flag("auto-correlate", "Automatically correlate related metrics").Default("false").BoolVar(&c.AutoCorrelate)
	app.Flag("correlation-threshold", "Threshold for auto-correlation (0.0-1.0)").Default("0.7").Float64Var(&c.AutoCorrelateThreshold)
	
	// Advanced visualization options
	visualizations := &AdvancedVisualizationConfig{
		DefaultType: VisualizationGraph,
	}
	app.Flag("viz-counters", "Visualization type for counters").Default("graph").EnumVar((*string)(&visualizations.CounterType), "graph", "stat", "bargauge", "gauge", "table", "heatmap")
	app.Flag("viz-gauges", "Visualization type for gauges").Default("gauge").EnumVar((*string)(&visualizations.GaugeType), "graph", "stat", "bargauge", "gauge", "table", "heatmap")
	app.Flag("viz-summaries", "Visualization type for summaries").Default("graph").EnumVar((*string)(&visualizations.SummaryType), "graph", "stat", "bargauge", "gauge", "table", "heatmap")
	app.Flag("heatmap-for-histograms", "Use heatmap for histogram metrics").Default("true").BoolVar(&visualizations.UseHeatmapForHistograms)
	app.Flag("stat-for-gauges", "Use stat panels for simple gauges").Default("true").BoolVar(&visualizations.UseStatForGauges)
	app.Flag("table-for-multilabels", "Use tables for metrics with many labels").Default("true").BoolVar(&visualizations.UseTableForMultiLabels)
	
	// Alert options
	app.Flag("generate-alerts", "Automatically generate alerts for common metrics").Default("false").BoolVar(&c.GenerateAlerts)
	
	// Vendor-specific options
	vendorConfig := c.VendorConfig
	app.Flag("vendor-detect", "Enable vendor-specific metric detection").Default("false").BoolVar(&vendorConfig.Enabled)
	app.Flag("juniper", "Enable special handling for Juniper metrics").Default("false").BoolVar(&vendorConfig.JuniperEnabled)
	app.Flag("cisco", "Enable special handling for Cisco metrics").Default("false").BoolVar(&vendorConfig.CiscoEnabled)
	app.Flag("group-by-vendor", "Group metrics by vendor in dashboard").Default("true").BoolVar(&vendorConfig.GroupByVendor)
	app.Flag("vendor-prefix", "Add custom vendor prefixes to detect").StringsVar(&vendorConfig.CustomPrefixes)
	
	// Assign the configurations
	c.FolderConfig = folderConfig
	c.LabelGrouping = labelGrouping
	c.Visualizations = visualizations
	c.VendorConfig = vendorConfig
}