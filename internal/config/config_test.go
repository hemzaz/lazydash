package config

import (
	"testing"

	kingpin "github.com/alecthomas/kingpin/v2"
)

func TestNew(t *testing.T) {
	config := New()
	
	// Test default values
	if config.Title != "Prometheus Dashboard" {
		t.Errorf("Expected default title to be 'Prometheus Dashboard', got %q", config.Title)
	}
	
	if config.Description != "Generated by Lazydash" {
		t.Errorf("Expected default description to be 'Generated by Lazydash', got %q", config.Description)
	}
	
	if !config.Stdin {
		t.Error("Expected default Stdin to be true")
	}
	
	if config.CounterExprTmpl != "sum(rate(:METRIC: [1m]))" {
		t.Errorf("Expected default CounterExprTmpl to be 'sum(rate(:METRIC: [1m]))', got %q", config.CounterExprTmpl)
	}
	
	if config.Delimiter != ":METRIC:" {
		t.Errorf("Expected default Delimiter to be ':METRIC:', got %q", config.Delimiter)
	}
	
	// Test vendor config defaults
	if config.VendorConfig == nil {
		t.Fatal("VendorConfig should not be nil")
	}
	
	if config.VendorConfig.Enabled {
		t.Error("Expected default VendorConfig.Enabled to be false")
	}
	
	if len(config.VendorConfig.KnownPrefixes) == 0 {
		t.Error("Expected default VendorConfig.KnownPrefixes to be non-empty")
	}
	
	if !config.VendorConfig.GroupByVendor {
		t.Error("Expected default VendorConfig.GroupByVendor to be true")
	}
}

func TestRegisterFlags(t *testing.T) {
	config := New()
	
	// Create a new kingpin app
	app := kingpin.New("test", "test app")
	
	// Register flags
	config.RegisterFlags(app)
	
	// Test if basic flags were registered
	fileFlag := app.GetFlag("file")
	if fileFlag == nil {
		t.Fatal("Expected 'file' flag to be registered")
	}
	
	titleFlag := app.GetFlag("title")
	if titleFlag == nil {
		t.Fatal("Expected 'title' flag to be registered")
	}
	
	// Check visualization flags
	vizCountersFlag := app.GetFlag("viz-counters")
	if vizCountersFlag == nil {
		t.Fatal("Expected 'viz-counters' flag to be registered")
	}
	
	vizGaugesFlag := app.GetFlag("viz-gauges")
	if vizGaugesFlag == nil {
		t.Fatal("Expected 'viz-gauges' flag to be registered")
	}
	
	vizSummariesFlag := app.GetFlag("viz-summaries")
	if vizSummariesFlag == nil {
		t.Fatal("Expected 'viz-summaries' flag to be registered")
	}
	
	// Check vendor flags
	vendorDetectFlag := app.GetFlag("vendor-detect")
	if vendorDetectFlag == nil {
		t.Fatal("Expected 'vendor-detect' flag to be registered")
	}
	
	juniperFlag := app.GetFlag("juniper")
	if juniperFlag == nil {
		t.Fatal("Expected 'juniper' flag to be registered")
	}
	
	// Check folder config flags
	folderFlag := app.GetFlag("folder")
	if folderFlag == nil {
		t.Fatal("Expected 'folder' flag to be registered")
	}
	
	// Check labels config flags
	groupByFlag := app.GetFlag("group-by")
	if groupByFlag == nil {
		t.Fatal("Expected 'group-by' flag to be registered")
	}
}

func TestVisualizationTypeEnums(t *testing.T) {
	// Test the enum values
	if VisualizationGraph != "graph" {
		t.Errorf("Expected VisualizationGraph to be 'graph', got %q", VisualizationGraph)
	}
	
	if VisualizationGauge != "gauge" {
		t.Errorf("Expected VisualizationGauge to be 'gauge', got %q", VisualizationGauge)
	}
	
	if VisualizationStat != "stat" {
		t.Errorf("Expected VisualizationStat to be 'stat', got %q", VisualizationStat)
	}
	
	if VisualizationTable != "table" {
		t.Errorf("Expected VisualizationTable to be 'table', got %q", VisualizationTable)
	}
	
	if VisualizationHeatmap != "heatmap" {
		t.Errorf("Expected VisualizationHeatmap to be 'heatmap', got %q", VisualizationHeatmap)
	}
	
	if VisualizationBarGauge != "bargauge" {
		t.Errorf("Expected VisualizationBarGauge to be 'bargauge', got %q", VisualizationBarGauge)
	}
}